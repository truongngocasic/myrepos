from ..common import common 

class agent:

    def __init__(self, header, agent_name, instance_name, instance_num):
        self.header                    = header
        self.instance_name             = instance_name
        self.interface_instance_name   = instance_name + "_if"
        self.instance_num              = instance_num
        #sub-component define
        self.package_name              = agent_name + "_pkg"
        self.defines_name              = agent_name + "_defines"
        self.master_agent_name         = agent_name + "_master_agent"
        self.master_driver_name        = agent_name + "_master_drv"
        self.master_sequencer_name     = agent_name + "_master_seqr"
        self.master_sequence_name      = agent_name + "_master_seq"
        self.slave_agent_name          = agent_name + "_slave_agent"
        self.slave_driver_name         = agent_name + "_slave_drv"
        self.slave_sequencer_name      = agent_name + "_slave_seqr"
        self.slave_sequence_name       = agent_name + "_slave_seq"
        self.monitor_name              = agent_name + "_mon"
        self.callback_name             = agent_name + "_mon_callback"
        self.cov_callback_name         = agent_name + "_mon_cov_callback"
        self.config_name               = agent_name + "_cfg"
        self.interface_name            = agent_name + "_if"
        self.transaction_name          = agent_name + "_tr"
        self.clock                     = "clk"
        self.reset                     = "resetn"
        self.interface_ins             = "vif"
        self.config_ins                = "cfg"
        self.driver_ins                = "drv"
        self.sequencer_ins             = "seqr"
        self.monitor_ins               = "mon"
        self.cov_callback_ins          = "cov_cb"
        self.monitor_ap_ins            = "monitor_ap"
        self.gen_sub_component         = 0

    def gen_include_if(self, num_space):
        return (num_space * " ") + "`include \"%s.sv\"\n" % (self.interface_name)

    def gen_include_pkg(self, num_space):
        return (num_space * " ") + "`include \"%s.sv\"\n" % (self.package_name)

    def gen_import_pkg(self, num_space):
        return (num_space * " ") + "import %s::*;\n" % (self.package_name)

    def gen_if_instance(self, clock, reset, num_space):
        ret_str = ""
        if (self.instance_num > 1):
            ret_str = ret_str + (num_space * " ") + "%-50s %s[%0d](%s, %s);\n" % (self.interface_name, self.interface_instance_name, self.instance_num, clock, reset)
        else:
            ret_str = ret_str + (num_space * " ") + "%-50s %s(%s, %s);\n" % (self.interface_name, self.interface_instance_name, clock, reset)
        return ret_str

    def gen_if_cfg_db_set_agent(self, path, num_space):
        ret_str = ""
        if (self.instance_num > 1):
            ii = 0
            while (ii < self.instance_num):
                ret_str = ret_str + (num_space * " ") + "uvm_config_db #(virtual %s)::set(uvm_root::get(), \"%s.%s[%0d]\", \"vif\", %s[%0d]);\n"\
                                        % (self.interface_name, path, self.instance_name, ii, self.interface_instance_name, ii)
                ii = ii + 1
        else:
            ret_str = ret_str + (num_space * " ") + "uvm_config_db #(virtual %s)::set(uvm_root::get(), \"%s.%s\", \"vif\", %s);\n"\
                                    % (self.interface_name, path, self.instance_name, self.interface_instance_name)
        return ret_str

    def gen_if_cfg_db_set_other(self, path, num_space):
        ret_str = ""
        if (self.instance_num > 1):
            ii = 0
            while (ii < self.instance_num):
                ret_str = ret_str + (num_space * " ") + "uvm_config_db #(virtual %s)::set(uvm_root::get(), \"%s\", \"%s[%0d]\", %s[%0d]);\n"\
                                        % (self.interface_name, path, self.interface_instance_name, ii, self.interface_instance_name, ii)
                ii = ii + 1
        else:
            ret_str = ret_str + (num_space * " ") + "uvm_config_db #(virtual %s)::set(uvm_root::get(), \"%s\", \"%s\", %s);\n"\
                                    % (self.interface_name, path, self.interface_instance_name, self.interface_instance_name)
        return ret_str

    #COMPONENT GENERATION
    def gen_agent(self):
        self.gen_package()
        self.gen_master_agent()
        self.gen_slave_agent()
        self.gen_driver(self.interface_name, self.interface_ins, self.transaction_name, self.clock, self.reset, self.config_name, self.config_ins, self.master_driver_name)
        self.gen_driver(self.interface_name, self.interface_ins, self.transaction_name, self.clock, self.reset, self.config_name, self.config_ins, self.slave_driver_name)
        self.gen_monitor()
        self.gen_master_sequencer()
        self.gen_slave_sequencer()
        self.gen_master_sequence()
        self.gen_slave_sequence()
        self.gen_callback()
        self.gen_cov_callback()
        self.gen_defines()
        self.gen_transaction()
        self.gen_interface()
        self.gen_config()

    def gen_package(self):
        fh = open(self.package_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.package_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.package_name.upper()))
        fh.write("`define _%s_\n" % (self.package_name.upper()))
        fh.write("\n")
        fh.write("package %s;\n" % (self.package_name))
        fh.write("  import uvm_pkg::*;\n")
        fh.write("\n")
        fh.write("  `include \"%s.sv\"\n" % (self.defines_name))
        fh.write("  `include \"%s.sv\"\n" % (self.config_name))
        fh.write("  `include \"%s.sv\"\n" % (self.transaction_name))
        fh.write("  `include \"%s.sv\"\n" % (self.config_name))
        fh.write("  `include \"%s.sv\"\n" % (self.callback_name))
        fh.write("  `include \"%s.sv\"\n" % (self.cov_callback_name))
        fh.write("  `include \"%s.sv\"\n" % (self.master_driver_name))
        fh.write("  `include \"%s.sv\"\n" % (self.master_sequencer_name))
        fh.write("  `include \"%s.sv\"\n" % (self.master_sequence_name))
        fh.write("  `include \"%s.sv\"\n" % (self.slave_driver_name))
        fh.write("  `include \"%s.sv\"\n" % (self.slave_sequencer_name))
        fh.write("  `include \"%s.sv\"\n" % (self.slave_sequence_name))
        fh.write("  `include \"%s.sv\"\n" % (self.monitor_name))
        fh.write("  `include \"%s.sv\"\n" % (self.master_agent_name))
        fh.write("  `include \"%s.sv\"\n" % (self.slave_agent_name))
        fh.write("\n")
        fh.write("endpackage: %s\n" % (self.package_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.package_name.upper()))
        fh.close()


    def gen_master_agent(self):
        fh = open(self.master_agent_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.master_agent_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.master_agent_name.upper()))
        fh.write("`define _%s_\n" % (self.master_agent_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_agent;\n" % (self.master_agent_name))
        fh.write("  `uvm_component_utils(%s)\n" % (self.master_agent_name))
        fh.write("\n")
        fh.write("  virtual %-42s %s;\n" % (self.interface_name, self.interface_ins))
        fh.write("\n")
        fh.write("  %-50s %s;\n" % (self.config_name, self.config_ins))
        fh.write("  %-50s %s;\n" % (self.master_driver_name, self.driver_ins))
        fh.write("  %-50s %s;\n" % (self.monitor_name, self.monitor_ins))
        fh.write("  %-50s %s;\n" % (self.master_sequencer_name, self.sequencer_ins))
        fh.write("  %-50s %s;\n" % (self.cov_callback_name, self.cov_callback_ins))
        fh.write("\n")
        fh.write("  %-50s %s;\n" % ("uvm_analysis_port #(" + self.transaction_name + ")", self.monitor_ap_ins))
        fh.write("\n")
        fh.write("%s" % (common.banner("function: new", 2)))
        fh.write("  function new(string name = \"%s\", uvm_component parent);\n" % (self.master_agent_name))
        fh.write("    super.new(name, parent);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: build_phase", 2)))
        fh.write("  function void build_phase(uvm_phase phase);\n")
        fh.write("    super.build_phase(phase);\n")
        fh.write("\n")
        fh.write("    //Get interface\n")
        fh.write("    if(!uvm_config_db #(virtual %s)::get(this, \"\", \"%s\", %s))\n" % (self.interface_name, self.interface_ins, self.interface_ins))
        fh.write("      `uvm_fatal(\"NOVIF\",{\"virtual interface must be set for: \", get_full_name(),\".%s\"});\n" % (self.interface_ins))
        fh.write("    //Assign interface\n")
        fh.write("    %s.%s = %s;\n" % (self.config_ins, self.interface_ins, self.interface_ins))
        fh.write("\n")
        fh.write("    %s = new(\"%s\", this);\n" % (self.monitor_ap_ins, self.monitor_ap_ins)) 
        fh.write("    %s = %s::type_id::create(\"%s\",this);\n" % (self.monitor_ins, self.monitor_name, self.monitor_ins))
        fh.write("    %s.%s = %s;\n" % (self.monitor_ins, self.config_ins, self.config_ins))
        fh.write("\n")
        fh.write("    if (get_is_active() == UVM_ACTIVE) begin\n")
        fh.write("      %s = %s::type_id::create(\"%s\",this);\n" % (self.sequencer_ins, self.master_sequencer_name, self.sequencer_ins))
        fh.write("      %s = %s::type_id::create(\"%s\",this);\n" % (self.driver_ins, self.master_driver_name, self.driver_ins)) 
        fh.write("      %s.%s = %s;\n" % (self.driver_ins, self.config_ins, self.config_ins))
        fh.write("    end\n")
        fh.write("\n")
        fh.write("    %s = new();\n" % (self.cov_callback_ins))
        fh.write("\n")
        fh.write("  endfunction: build_phase\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: connect_phase", 2)))
        fh.write("  function void connect_phase(uvm_phase phase);\n")
        fh.write("    super.connect_phase(phase);\n")
        fh.write("\n")
        fh.write("    %s.%s.connect(%s);\n" % (self.monitor_ins, self.monitor_ap_ins, self.monitor_ap_ins))
        fh.write("    if (get_is_active() == UVM_ACTIVE) begin\n")
        fh.write("      %s.seq_item_port.connect(%s.seq_item_export);\n" % (self.driver_ins, self.sequencer_ins))
        fh.write("    end\n")
        fh.write("\n")
        fh.write("    uvm_callbacks #(%s, %s)::add(%s, %s);\n" % (self.monitor_name, self.callback_name, self.monitor_ins, self.cov_callback_ins))
        fh.write("\n")
        fh.write("  endfunction: connect_phase\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (self.master_agent_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.master_agent_name.upper()))
        fh.close()

    def gen_slave_agent(self):
        fh = open(self.slave_agent_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.slave_agent_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.slave_agent_name.upper()))
        fh.write("`define _%s_\n" % (self.slave_agent_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_agent;\n" % (self.slave_agent_name))
        fh.write("  `uvm_component_utils(%s)\n" % (self.slave_agent_name))
        fh.write("\n")
        fh.write("  virtual %-42s %s;\n" % (self.interface_name, self.interface_ins))
        fh.write("\n")
        fh.write("  %-50s %s;\n" % (self.config_name, self.config_ins))
        fh.write("  %-50s %s;\n" % (self.slave_driver_name, self.driver_ins))
        fh.write("  %-50s %s;\n" % (self.monitor_name, self.monitor_ins))
        fh.write("  %-50s %s;\n" % (self.slave_sequencer_name, self.sequencer_ins))
        fh.write("  %-50s %s;\n" % (self.cov_callback_name, self.cov_callback_ins))
        fh.write("\n")
        fh.write("  %-50s %s;\n" % ("uvm_analysis_port #(" + self.transaction_name + ")", self.monitor_ap_ins))
        fh.write("\n")
        fh.write("%s" % (common.banner("function: new", 2)))
        fh.write("  function new(string name = \"%s\", uvm_component parent);\n" % (self.slave_agent_name))
        fh.write("    super.new(name, parent);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: build_phase", 2)))
        fh.write("  function void build_phase(uvm_phase phase);\n")
        fh.write("    super.build_phase(phase);\n")
        fh.write("\n")
        fh.write("    //Get interface\n")
        fh.write("    if(!uvm_config_db #(virtual %s)::get(this, \"\", \"%s\", %s))\n" % (self.interface_name, self.interface_ins, self.interface_ins))
        fh.write("      `uvm_fatal(\"NOVIF\",{\"virtual interface must be set for: \", get_full_name(),\".%s\"});\n" % (self.interface_ins))
        fh.write("    //Assign interface\n")
        fh.write("    %s.%s = %s;\n" % (self.config_ins, self.interface_ins, self.interface_ins))
        fh.write("\n")
        fh.write("    %s = new(\"%s\", this);\n" % (self.monitor_ap_ins, self.monitor_ap_ins)) 
        fh.write("    %s = %s::type_id::create(\"%s\",this);\n" % (self.monitor_ins, self.monitor_name, self.monitor_ins))
        fh.write("    %s.%s = %s;\n" % (self.monitor_ins, self.config_ins, self.config_ins))
        fh.write("\n")
        fh.write("    if (get_is_active() == UVM_ACTIVE) begin\n")
        fh.write("      %s = %s::type_id::create(\"%s\",this);\n" % (self.sequencer_ins, self.slave_sequencer_name, self.sequencer_ins))
        fh.write("      %s = %s::type_id::create(\"%s\",this);\n" % (self.driver_ins, self.slave_driver_name, self.driver_ins)) 
        fh.write("      %s.%s = %s;\n" % (self.driver_ins, self.config_ins, self.config_ins))
        fh.write("    end\n")
        fh.write("\n")
        fh.write("    %s = new();\n" % (self.cov_callback_ins))
        fh.write("\n")
        fh.write("  endfunction: build_phase\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: connect_phase", 2)))
        fh.write("  function void connect_phase(uvm_phase phase);\n")
        fh.write("    super.connect_phase(phase);\n")
        fh.write("\n")
        fh.write("    %s.%s.connect(%s);\n" % (self.monitor_ins, self.monitor_ap_ins, self.monitor_ap_ins))
        fh.write("    if (get_is_active() == UVM_ACTIVE) begin\n")
        fh.write("      %s.seq_item_port.connect(%s.seq_item_export);\n" % (self.driver_ins, self.sequencer_ins))
        fh.write("      %s.peek_port.connect(%s.peek_imp);\n" % (self.sequencer_ins, self.monitor_ins))
        fh.write("    end\n")
        fh.write("\n")
        fh.write("    uvm_callbacks #(%s, %s)::add(%s, %s);\n" % (self.monitor_name, self.callback_name, self.monitor_ins, self.cov_callback_ins))
        fh.write("\n")
        fh.write("  endfunction: connect_phase\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (self.slave_agent_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.slave_agent_name.upper()))
        fh.close()

    def gen_driver(self, interface_name, interface_ins, transaction_name, clock, reset, config_name, config_ins, driver_name):
        fh = open(driver_name + ".sv", "w")
        fh.write(self.header.replace("file_name", driver_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (driver_name.upper()))
        fh.write("`define _%s_\n" % (driver_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_driver #(%s);\n" % (driver_name, transaction_name))
        fh.write("  `uvm_component_utils(%s)\n" % (driver_name))
        fh.write("\n")
        fh.write("  virtual %-42s %s;\n" % (interface_name, interface_ins))
        fh.write("  %-50s %s;\n" % (config_name, config_ins))
        fh.write("\n")
        fh.write("%s" % (common.banner("function: new", 2)))
        fh.write("  function new(string name = \"%s\", uvm_component parent);\n" % (driver_name))
        fh.write("    super.new(name, parent);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: build_phase", 2)))
        fh.write("  function void build_phase(uvm_phase phase);\n")
        fh.write("    super.build_phase(phase);\n")
        fh.write("\n")
        fh.write("  endfunction: build_phase\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: connect_phase", 2)))
        fh.write("  function void connect_phase(uvm_phase phase);\n")
        fh.write("    super.connect_phase(phase);\n")
        fh.write("\n")
        fh.write("    //Assign interface\n")
        fh.write("    %s = %s.%s;\n" % (interface_ins, config_ins, interface_ins))
        fh.write("\n")
        fh.write("  endfunction: connect_phase\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("task: run_phase", 2)))
        fh.write("  task run_phase(uvm_phase phase);\n")
        fh.write("\n")
        fh.write("    forever begin\n")
        fh.write("      fork\n")
        fh.write("      begin //reset\n")
        fh.write("        @ (negedge %s.%s);\n" % (interface_ins, reset))
        fh.write("        reset_signal();\n")
        fh.write("      end\n")
        fh.write("\n")
        fh.write("      begin //drive\n")
        fh.write("        @ (posedge %s.%s);\n" % (interface_ins, reset))
        fh.write("        @ (posedge %s.%s);\n" % (interface_ins, clock))
        fh.write("        while (1) begin\n")
        fh.write("          get_and_drive();\n")
        fh.write("        end\n")
        fh.write("      end\n")
        fh.write("      join_any\n")
        fh.write("      disable fork;\n")
        fh.write("    end\n")
        fh.write("\n")
        fh.write("  endtask: run_phase\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("task: reset_signal", 2)))
        fh.write("  task reset_signal();\n")
        fh.write("\n")
        fh.write("    //Add code here\n")
        fh.write("\n")
        fh.write("  endtask: reset_signal\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("task: get_and_drive", 2)))
        fh.write("  task get_and_drive();\n")
        fh.write("\n")
        fh.write("    seq_item_port.get_next_item(req);\n")
        fh.write("    //Add code here\n")
        fh.write("    @ (posedge %s.%s);\n" % (interface_ins, clock))
        fh.write("    seq_item_port.item_done();\n")
        fh.write("\n")
        fh.write("  endtask: get_and_drive\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (driver_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (driver_name.upper()))
        fh.close()

    def gen_monitor(self):
        fh = open(self.monitor_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.monitor_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.monitor_name.upper()))
        fh.write("`define _%s_\n" % (self.monitor_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_monitor;\n" % (self.monitor_name))
        fh.write("  `uvm_component_utils(%s)\n" % (self.monitor_name))
        fh.write("  `uvm_register_cb(%s, %s)\n" % (self.monitor_name, self.callback_name))
        fh.write("\n")
        fh.write("  virtual %-42s %s;\n" % (self.interface_name, self.interface_ins))
        fh.write("  %-50s %s;\n" % (self.config_name, self.config_ins))
        fh.write("\n")
        fh.write("  event                                              item_received_evt;\n")
        fh.write("  %-50s tr;\n" % (self.transaction_name))
        fh.write("\n")
        fh.write("  %-50s %s;\n" % ("uvm_analysis_port #(" + self.transaction_name + ")", self.monitor_ap_ins))
        fh.write("  uvm_blocking_peek_imp #(%s, %s) peek_imp;\n" % (self.transaction_name, self.monitor_name))
        fh.write("\n")
        fh.write("%s" % (common.banner("function: new", 2)))
        fh.write("  function new(string name = \"%s\", uvm_component parent);\n" % (self.monitor_name))
        fh.write("    super.new(name, parent);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: build_phase", 2)))
        fh.write("  function void build_phase(uvm_phase phase);\n")
        fh.write("    super.build_phase(phase);\n")
        fh.write("\n")
        fh.write("    %s = new(\"%s\", this);\n" % (self.monitor_ap_ins, self.monitor_ap_ins)) 
        fh.write("    peek_imp = new(\"peek_imp\", this);\n")
        fh.write("\n")
        fh.write("  endfunction: build_phase\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: connect_phase", 2)))
        fh.write("  function void connect_phase(uvm_phase phase);\n")
        fh.write("    super.connect_phase(phase);\n")
        fh.write("\n")
        fh.write("    //Assign interface\n")
        fh.write("    %s = %s.%s;\n" % (self.interface_ins, self.config_ins, self.interface_ins))
        fh.write("\n")
        fh.write("  endfunction: connect_phase\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("task: run_phase", 2)))
        fh.write("  task run_phase(uvm_phase phase);\n")
        fh.write("\n")
        fh.write("    forever begin\n")
        fh.write("      fork\n")
        fh.write("      begin //reset\n")
        fh.write("        @ (negedge %s.%s);\n" % (self.interface_ins, self.reset))
        fh.write("        reset_signal();\n")
        fh.write("      end\n")
        fh.write("\n")
        fh.write("      begin //monitor\n")
        fh.write("        @ (posedge %s.%s);\n" % (self.interface_ins, self.reset))
        fh.write("        @ (posedge %s.%s);\n" % (self.interface_ins, self.clock))
        fh.write("        while (1) begin\n")
        fh.write("          collect();\n")
        fh.write("        end\n")
        fh.write("      end\n")
        fh.write("      join_any\n")
        fh.write("      disable fork;\n")
        fh.write("    end\n")
        fh.write("\n")
        fh.write("  endtask: run_phase\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("task: reset_signal", 2)))
        fh.write("  task reset_signal();\n")
        fh.write("\n")
        fh.write("    //Add code here\n")
        fh.write("\n")
        fh.write("  endtask: reset_signal\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("task: collect", 2)))
        fh.write("  task collect();\n")
        fh.write("\n")
        fh.write("    tr = %s::type_id::create(\"tr\", this);\n" % (self.transaction_name))
        fh.write("    //Add code here\n")
        fh.write("    @ (posedge %s.%s);\n" % (self.interface_ins, self.clock))
        fh.write("    -> item_received_evt;\n")
        fh.write("    `uvm_do_callbacks(%s, %s, transaction_received(tr))\n" % (self.monitor_name, self.callback_name))
        fh.write("    monitor_ap.write(tr);\n")
        fh.write("\n")
        fh.write("  endtask: collect\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("task: peek", 2)))
        fh.write("  task peek(output %s %s);\n" % (self.transaction_name, self.transaction_name))
        fh.write("\n")
        fh.write("    @item_received_evt;\n")
        fh.write("    %s = this.tr;\n" % (self.transaction_name))
        fh.write("\n")
        fh.write("  endtask: peek\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (self.monitor_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.monitor_name.upper()))
        fh.close()

    def gen_defines(self):
        fh = open(self.defines_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.defines_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.defines_name.upper()))
        fh.write("`define _%s_\n" % (self.defines_name.upper()))
        fh.write("\n")
        fh.write("  //Add definitions\n")
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.defines_name.upper()))
        fh.close()

    def gen_transaction(self):
        fh = open(self.transaction_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.transaction_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.transaction_name.upper()))
        fh.write("`define _%s_\n" % (self.transaction_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_sequence_item;\n" % (self.transaction_name))
        fh.write("\n")
        fh.write("  `uvm_object_utils_begin(%s)\n" % (self.transaction_name))
        fh.write("  `uvm_object_utils_end\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: new", 2)))
        fh.write("  function new(string name = \"%s\");\n" % (self.transaction_name))
        fh.write("    super.new(name);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: pre_randomize", 2)))
        fh.write("  function void pre_randomize();\n")
        fh.write("  endfunction: pre_randomize\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: post_randomize", 2)))
        fh.write("  function void post_randomize();\n")
        fh.write("  endfunction: post_randomize\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (self.transaction_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.transaction_name.upper()))
        fh.close()

    def gen_master_sequencer(self):
        fh = open(self.master_sequencer_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.master_sequencer_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.master_sequencer_name.upper()))
        fh.write("`define _%s_\n" % (self.master_sequencer_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_sequencer #(%s);\n" % (self.master_sequencer_name, self.transaction_name))
        fh.write("  `uvm_component_utils(%s)\n" % (self.master_sequencer_name))
        fh.write("\n")
        fh.write("  %-50s %s;\n" % (self.config_name, self.config_ins))
        fh.write("\n")
        fh.write("%s" % (common.banner("function: new", 2)))
        fh.write("  function new(string name = \"%s\", uvm_component parent);\n" % (self.master_sequencer_name))
        fh.write("    super.new(name, parent);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: build_phase", 2)))
        fh.write("  function void build_phase(uvm_phase phase);\n")
        fh.write("    super.build_phase(phase);\n")
        fh.write("  endfunction: build_phase\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (self.master_sequencer_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.master_sequencer_name.upper()))
        fh.close()

    def gen_slave_sequencer(self):
        fh = open(self.slave_sequencer_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.slave_sequencer_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.slave_sequencer_name.upper()))
        fh.write("`define _%s_\n" % (self.slave_sequencer_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_sequencer #(%s);\n" % (self.slave_sequencer_name, self.transaction_name))
        fh.write("  `uvm_component_utils(%s)\n" % (self.slave_sequencer_name))
        fh.write("\n")
        fh.write("  %-50s %s;\n" % (self.config_name, self.config_ins))
        fh.write("  %-50s peek_port;\n" % ("uvm_blocking_peek_port #(" + self.transaction_name + ")"))
        fh.write("\n")
        fh.write("%s" % (common.banner("function: new", 2)))
        fh.write("  function new(string name = \"%s\", uvm_component parent);\n" % (self.slave_sequencer_name))
        fh.write("    super.new(name, parent);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: build_phase", 2)))
        fh.write("  function void build_phase(uvm_phase phase);\n")
        fh.write("    super.build_phase(phase);\n")
        fh.write("    peek_port = new(\"peek_port\", this);\n")
        fh.write("  endfunction: build_phase\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (self.slave_sequencer_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.slave_sequencer_name.upper()))
        fh.close()

    def gen_master_sequence(self):
        fh = open(self.master_sequence_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.master_sequence_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.master_sequence_name.upper()))
        fh.write("`define _%s_\n" % (self.master_sequence_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_sequence;\n" % (self.master_sequence_name))
        fh.write("  `uvm_object_utils(%s)\n" % (self.master_sequence_name))
        fh.write("  `uvm_declare_p_sequencer(%s)\n" % (self.master_sequencer_name))
        fh.write("\n")
        fh.write("%s" % (common.banner("function: new", 2)))
        fh.write("  function new(string name = \"%s\");\n" % (self.master_sequence_name))
        fh.write("    super.new(name);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("task: pre_body", 2)))
        fh.write("  task pre_body();\n")
        fh.write("    if (starting_phase!=null) begin\n")
        fh.write("      starting_phase.raise_objection(this, get_type_name());\n")
        fh.write("    end\n")
        fh.write("\n")
        fh.write("  endtask: pre_body\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("task: body", 2)))
        fh.write("  virtual task body();\n")
        fh.write("    //Add code here\n")
        fh.write("  endtask: body\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("task: post_body", 2)))
        fh.write("  task post_body();\n")
        fh.write("    if (starting_phase!=null) begin\n")
        fh.write("      starting_phase.drop_objection(this, get_type_name());\n")
        fh.write("    end\n")
        fh.write("  endtask: post_body\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (self.master_sequence_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.master_sequence_name.upper()))
        fh.close()

    def gen_slave_sequence(self):
        fh = open(self.slave_sequence_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.slave_sequence_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.slave_sequence_name.upper()))
        fh.write("`define _%s_\n" % (self.slave_sequence_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_sequence;\n" % (self.slave_sequence_name))
        fh.write("  `uvm_object_utils(%s)\n" % (self.slave_sequence_name))
        fh.write("  `uvm_declare_p_sequencer(%s)\n" % (self.slave_sequencer_name))
        fh.write("\n")
        fh.write("  %-50s tr;\n" % (self.transaction_name))
        fh.write("\n")
        fh.write("%s" % (common.banner("function: new", 2)))
        fh.write("  function new(string name = \"%s\");\n" % (self.slave_sequence_name))
        fh.write("    super.new(name);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("task: body", 2)))
        fh.write("  virtual task body();\n")
        fh.write("    forever begin\n")
        fh.write("      p_sequencer.peek_port.peek(tr);\n")
        fh.write("      uvm_test_done.raise_objection(this);\n")
        fh.write("      //Add code here\n")
        fh.write("\n")
        fh.write("      uvm_test_done.drop_objection(this);\n")
        fh.write("    end\n")
        fh.write("  endtask: body\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (self.slave_sequence_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.slave_sequence_name.upper()))
        fh.close()

    def gen_callback(self):
        fh = open(self.callback_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.callback_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.callback_name.upper()))
        fh.write("`define _%s_\n" % (self.callback_name.upper()))
        fh.write("\n")
        fh.write("virtual class %s extends uvm_callback;\n" % (self.callback_name))
        fh.write("\n")
        fh.write("%s" % (common.banner("function: new", 2)))
        fh.write("  function new(string name = \"%s\");\n" % (self.callback_name))
        fh.write("    super.new(name);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("task: transaction_received", 2)))
        fh.write("  virtual task transaction_received(%s tr);\n" % (self.transaction_name))
        fh.write("  endtask: transaction_received\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (self.callback_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.callback_name.upper()))
        fh.close()


    def gen_cov_callback(self):
        fh = open(self.cov_callback_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.cov_callback_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.cov_callback_name.upper()))
        fh.write("`define _%s_\n" % (self.cov_callback_name.upper()))
        fh.write("\n")
        fh.write("class %s extends %s;\n" % (self.cov_callback_name, self.callback_name))
        fh.write("  `uvm_object_utils(%s)\n" % (self.cov_callback_name))
        fh.write("\n")
        fh.write("%s" % (common.banner("function: new", 2)))
        fh.write("  function new(string name = \"%s\");\n" % (self.cov_callback_name))
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("task: transaction_received", 2)))
        fh.write("  virtual task transaction_received(%s tr);\n" % (self.transaction_name))
        fh.write("  endtask: transaction_received\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (self.cov_callback_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.cov_callback_name.upper()))
        fh.close()

    def gen_interface(self):
        fh = open(self.interface_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.interface_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.interface_name.upper()))
        fh.write("`define _%s_\n" % (self.interface_name.upper()))
        fh.write("\n")
        fh.write("`include \"%s.sv\"\n" % (self.defines_name))
        fh.write("\n")
        fh.write("interface %s (input logic %s, input logic %s);\n" % (self.interface_name, self.clock, self.reset))
        fh.write("\n")
        fh.write("  //Add signal here\n")
        fh.write("\n")
        fh.write("endinterface: %s\n" % (self.interface_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.interface_name.upper()))
        fh.close()

    def gen_config(self):
        fh = open(self.config_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.config_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.config_name.upper()))
        fh.write("`define _%s_\n" % (self.config_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_object;\n" % (self.config_name))
        fh.write("  `uvm_object_utils(%s)\n" % (self.config_name))
        fh.write("\n")
        fh.write("  virtual %s %s;\n" % (self.interface_name, self.interface_ins))
        fh.write("\n")
        fh.write("%s" % (common.banner("function: new", 2)))
        fh.write("  function new(string name = \"%s\");\n" % (self.config_name))
        fh.write("    super.new(name);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (self.config_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.config_name.upper()))
        fh.close()



