class driver:

    def __init__(self, header, agent_setting):
        self.header                    = header
        self.master_driver_name        = agent_setting.get("master_driver_name",    agent_setting["agent_name"] + "_master_drv")
        self.slave_driver_name         = agent_setting.get("slave_driver_name",     agent_setting["agent_name"] + "_slave_drv")
        self.config_name               = agent_setting.get("config_name",           agent_setting["agent_name"] + "_cfg")
        self.interface_name            = agent_setting.get("interface_name",        agent_setting["agent_name"] + "_if")
        self.transaction_name          = agent_setting.get("transaction_name",      agent_setting["agent_name"] + "_tr")
        self.clock                     = agent_setting.get("clock", "clk")
        self.reset                     = agent_setting.get("reset", "resetn")
        self.interface_ins             = agent_setting.get("interface_instance",    "vif")
        self.config_ins                = agent_setting.get("config_instance",       "cfg")

    def code_gen(self, interface_name, interface_ins, transaction_name, clock, reset, config_name, config_ins, driver_name):
        fh = open(driver_name + ".sv", "w")
        fh.write(self.header.replace("file_name", driver_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (driver_name.upper()))
        fh.write("`define _%s_\n" % (driver_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_driver #(%s);\n" % (driver_name, transaction_name))
        fh.write("  `uvm_component_utils(%s)\n" % (driver_name))
        fh.write("\n")
        fh.write("  virtual %-42s %s;\n" % (interface_name, interface_ins))
        fh.write("  %-50s %s;\n" % (config_name, config_ins))
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //function: new\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  function new(string name = \"%s\", uvm_component parent);\n" % (driver_name))
        fh.write("    super.new(name, parent);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //function: build_phase\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  function void build_phase(uvm_phase phase);\n")
        fh.write("    super.build_phase(phase);\n")
        fh.write("\n")
        fh.write("  endfunction: build_phase\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //function: connect_phase\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  function void connect_phase(uvm_phase phase);\n")
        fh.write("    super.connect_phase(phase);\n")
        fh.write("\n")
        fh.write("    //Assign interface\n")
        fh.write("    %s = %s.%s;\n" % (interface_ins, config_ins, interface_ins))
        fh.write("\n")
        fh.write("  endfunction: connect_phase\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //task: run_phase\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  task run_phase(uvm_phase phase);\n")
        fh.write("\n")
        fh.write("    forever begin\n")
        fh.write("      fork\n")
        fh.write("      begin //reset\n")
        fh.write("        @ (negedge %s.%s);\n" % (interface_ins, reset))
        fh.write("        reset_signal();\n")
        fh.write("      end\n")
        fh.write("\n")
        fh.write("      begin //drive\n")
        fh.write("        @ (posedge %s.%s);\n" % (interface_ins, reset))
        fh.write("        @ (posedge %s.%s);\n" % (interface_ins, clock))
        fh.write("        while (1) begin\n")
        fh.write("          get_and_drive();\n")
        fh.write("        end\n")
        fh.write("      end\n")
        fh.write("      join_any\n")
        fh.write("      disable fork;\n")
        fh.write("    end\n")
        fh.write("\n")
        fh.write("  endtask: run_phase\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //task: reset_signal\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  task reset_signal();\n")
        fh.write("\n")
        fh.write("    //Add code here\n")
        fh.write("\n")
        fh.write("  endtask: reset_signal\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //task: get_and_drive\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  task get_and_drive();\n")
        fh.write("\n")
        fh.write("    seq_item_port.get_next_item(req);\n")
        fh.write("    //Add code here\n")
        fh.write("    @ (posedge %s.%s);\n" % (interface_ins, clock))
        fh.write("    seq_item_port.item_done();\n")
        fh.write("\n")
        fh.write("  endtask: get_and_drive\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (driver_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (driver_name.upper()))
        fh.close()

    def master_driver_gen(self):
        self.code_gen(self.interface_name, self.interface_ins, self.transaction_name, self.clock, self.reset, self.config_name, self.config_ins, self.master_driver_name)

    def slave_driver_gen(self):
        self.code_gen(self.interface_name, self.interface_ins, self.transaction_name, self.clock, self.reset, self.config_name, self.config_ins, self.slave_driver_name)
