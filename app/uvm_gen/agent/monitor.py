class monitor:

    def __init__(self, header, agent_setting):
        self.header                    = header
        self.monitor_name              = agent_setting.get("monitor_name",          agent_setting["agent_name"] + "_mon")
        self.callback_name             = agent_setting.get("callback_name",         agent_setting["agent_name"] + "_mon_callback")
        self.config_name               = agent_setting.get("config_name",           agent_setting["agent_name"] + "_cfg")
        self.interface_name            = agent_setting.get("interface_name",        agent_setting["agent_name"] + "_if")
        self.transaction_name          = agent_setting.get("transaction_name",      agent_setting["agent_name"] + "_tr")
        self.clock                     = agent_setting.get("clock", "clk")
        self.reset                     = agent_setting.get("reset", "resetn")
        self.interface_ins             = agent_setting.get("interface_instance",    "vif")
        self.config_ins                = agent_setting.get("config_instance",       "cfg")
        self.monitor_ap_ins            = agent_setting.get("monitor_ap_instance",   "monitor_ap")

    def monitor_gen(self):
        fh = open(self.monitor_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.monitor_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.monitor_name.upper()))
        fh.write("`define _%s_\n" % (self.monitor_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_monitor;\n" % (self.monitor_name))
        fh.write("  `uvm_component_utils(%s)\n" % (self.monitor_name))
        fh.write("  `uvm_register_cb(%s, %s)\n" % (self.monitor_name, self.callback_name))
        fh.write("\n")
        fh.write("  virtual %-42s %s;\n" % (self.interface_name, self.interface_ins))
        fh.write("  %-50s %s;\n" % (self.config_name, self.config_ins))
        fh.write("\n")
        fh.write("  event                                              item_received_evt;\n")
        fh.write("  %-50s tr;\n" % (self.transaction_name))
        fh.write("\n")
        fh.write("  %-50s %s;\n" % ("uvm_analysis_port #(" + self.transaction_name + ")", self.monitor_ap_ins))
        fh.write("  uvm_blocking_peek_imp #(%s, %s) peek_imp;\n" % (self.transaction_name, self.monitor_name))
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //function: new\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  function new(string name = \"%s\", uvm_component parent);\n" % (self.monitor_name))
        fh.write("    super.new(name, parent);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //function: build_phase\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  function void build_phase(uvm_phase phase);\n")
        fh.write("    super.build_phase(phase);\n")
        fh.write("\n")
        fh.write("    %s = new(\"%s\", this);\n" % (self.monitor_ap_ins, self.monitor_ap_ins)) 
        fh.write("    peek_imp = new(\"peek_imp\", this);\n")
        fh.write("\n")
        fh.write("  endfunction: build_phase\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //function: connect_phase\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  function void connect_phase(uvm_phase phase);\n")
        fh.write("    super.connect_phase(phase);\n")
        fh.write("\n")
        fh.write("    //Assign interface\n")
        fh.write("    %s = %s.%s;\n" % (self.interface_ins, self.config_ins, self.interface_ins))
        fh.write("\n")
        fh.write("  endfunction: connect_phase\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //task: run_phase\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  task run_phase(uvm_phase phase);\n")
        fh.write("\n")
        fh.write("    forever begin\n")
        fh.write("      fork\n")
        fh.write("      begin //reset\n")
        fh.write("        @ (negedge %s.%s);\n" % (self.interface_ins, self.reset))
        fh.write("        reset_signal();\n")
        fh.write("      end\n")
        fh.write("\n")
        fh.write("      begin //monitor\n")
        fh.write("        @ (posedge %s.%s);\n" % (self.interface_ins, self.reset))
        fh.write("        @ (posedge %s.%s);\n" % (self.interface_ins, self.clock))
        fh.write("        while (1) begin\n")
        fh.write("          collect();\n")
        fh.write("        end\n")
        fh.write("      end\n")
        fh.write("      join_any\n")
        fh.write("      disable fork;\n")
        fh.write("    end\n")
        fh.write("\n")
        fh.write("  endtask: run_phase\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //task: reset_signal\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  task reset_signal();\n")
        fh.write("\n")
        fh.write("    //Add code here\n")
        fh.write("\n")
        fh.write("  endtask: reset_signal\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //task: collect\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  task collect();\n")
        fh.write("\n")
        fh.write("    tr = %s::type_id::create(\"tr\", this);\n" % (self.transaction_name))
        fh.write("    //Add code here\n")
        fh.write("    @ (posedge %s.%s);\n" % (self.interface_ins, self.clock))
        fh.write("    -> item_received_evt;\n")
        fh.write("    `uvm_do_callbacks(%s, %s, transaction_received(tr))\n" % (self.monitor_name, self.callback_name))
        fh.write("    monitor_ap.write(tr);\n")
        fh.write("\n")
        fh.write("  endtask: collect\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //task: peek\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  task peek(output %s %s);\n" % (self.transaction_name, self.transaction_name))
        fh.write("\n")
        fh.write("    @item_received_evt;\n")
        fh.write("    %s = this.tr;\n" % (self.transaction_name))
        fh.write("\n")
        fh.write("  endtask: peek\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (self.monitor_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.monitor_name.upper()))
        fh.close()

    #def monitor_gen(self):
    #    self.code_gen(self.interface_name, self.interface_ins, self.transaction_name, self.clock, self.reset, self.config_name, self.config_ins, self.monitor_name, self.callback_name)
