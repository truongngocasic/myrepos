class sequence:

    def __init__(self, header, agent_setting):
        self.header                    = header
        self.master_sequence_name      = agent_setting.get("master_sequence_name",  agent_setting["agent_name"] + "_master_seq")
        self.master_sequencer_name     = agent_setting.get("master_sequencer_name", agent_setting["agent_name"] + "_master_seqr")
        self.slave_sequence_name       = agent_setting.get("slave_sequence_name",   agent_setting["agent_name"] + "_slave_seq")
        self.slave_sequencer_name      = agent_setting.get("slave_sequencer_name",  agent_setting["agent_name"] + "_slave_seqr")
        self.transaction_name          = agent_setting.get("transaction_name",      agent_setting["agent_name"] + "_tr")

    def master_sequence_gen(self, sequence_name, sequencer_name):
        fh = open(sequence_name + ".sv", "w")
        fh.write(self.header.replace("file_name", sequence_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (sequence_name.upper()))
        fh.write("`define _%s_\n" % (sequence_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_sequence;\n" % (sequence_name))
        fh.write("  `uvm_object_utils(%s)\n" % (sequence_name))
        fh.write("  `uvm_declare_p_sequencer(%s)\n" % (sequencer_name))
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //function: new\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  function new(string name = \"%s\");\n" % (sequence_name))
        fh.write("    super.new(name);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //task: pre_body\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  task pre_body();\n")
        fh.write("    if (starting_phase!=null) begin\n")
        fh.write("      starting_phase.raise_objection(this, get_type_name());\n")
        fh.write("    end\n")
        fh.write("\n")
        fh.write("  endtask: pre_body\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //task: body\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  virtual task body();\n")
        fh.write("    //Add code here\n")
        fh.write("  endtask: body\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //task: post_body\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  task post_body();\n")
        fh.write("    if (starting_phase!=null) begin\n")
        fh.write("      starting_phase.drop_objection(this, get_type_name());\n")
        fh.write("    end\n")
        fh.write("  endtask: post_body\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (sequence_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (sequence_name.upper()))
        fh.close()

    def slave_sequence_gen(self, sequence_name, sequencer_name, transaction_name):
        fh = open(sequence_name + ".sv", "w")
        fh.write(self.header.replace("file_name", sequence_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (sequence_name.upper()))
        fh.write("`define _%s_\n" % (sequence_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_sequence;\n" % (sequence_name))
        fh.write("  `uvm_object_utils(%s)\n" % (sequence_name))
        fh.write("  `uvm_declare_p_sequencer(%s)\n" % (sequencer_name))
        fh.write("\n")
        fh.write("  %-50s tr;\n" % (transaction_name))
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //function: new\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  function new(string name = \"%s\");\n" % (sequence_name))
        fh.write("    super.new(name);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  //task: body\n")
        fh.write("  //--------------------------------------------------\n")
        fh.write("  virtual task body();\n")
        fh.write("    forever begin\n")
        fh.write("      p_sequencer.peek_port.peek(tr);\n")
        fh.write("      uvm_test_done.raise_objection(this);\n")
        fh.write("      //Add code here\n")
        fh.write("\n")
        fh.write("      uvm_test_done.drop_objection(this);\n")
        fh.write("    end\n")
        fh.write("  endtask: body\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (sequence_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (sequence_name.upper()))
        fh.close()

    def sequence_gen(self):
        self.master_sequence_gen(self.master_sequence_name, self.master_sequencer_name)
        self.slave_sequence_gen(self.slave_sequence_name, self.slave_sequencer_name, self.transaction_name)
