class makefile:

    def __init__(self, header, project_name, uvm_env):
        self.header             = header
        self.makefile_name      = "Makefile"
        self.testsample_name    = project_name + "_testsample"
        self.testbench_top_name = uvm_env["testbench"]
        self.agent_setting      = uvm_env["agent"]

    def gen(self):
        testbench_model_path_inc  = ""
        agent_dict      = {}
        for agent in self.agent_setting:
            agent_name                = agent["agent_name"]
            if (agent_name not in agent_dict):          #Gen agent component
                testbench_model_path_inc  = testbench_model_path_inc + "TBINC += +incdir+$(MODEL_DIR)/%s\n" % (agent_name)
                agent_dict[agent_name] = 1

        fh = open(self.makefile_name, "w")
        self.header = self.header.replace("file_name", self.makefile_name)
        fh.write(self.header.replace("//", "#"))
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("# Set variables\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("VPD  ?= ON\n")
        fh.write("\n")
        fh.write("#--- message level ---\n")
        fh.write("UVM_VERBOSITY = UVM_NONE\n")
        fh.write("#UVM_VERBOSITY = UVM_LOW\n")
        fh.write("#UVM_VERBOSITY = UVM_MEDIUM\n")
        fh.write("#UVM_VERBOSITY = UVM_HIGH\n")
        fh.write("#UVM_VERBOSITY = UVM_FULL\n")
        fh.write("#UVM_VERBOSITY = UVM_DEBUG\n")
        fh.write("\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("# Directories\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("WORK_DIR   = $(shell pwd | sed -e \"s:/sim.*::\")\n")
        fh.write("RTL_DIR    = $(WORK_DIR)/rtl\n")
        fh.write("MODEL_DIR  = $(WORK_DIR)/model\n")
        fh.write("ENV_DIR    = $(WORK_DIR)/env\n")
        fh.write("SIM_DIR    = $(WORK_DIR)/sim\n")
        fh.write("TEST_DIR   = $(WORK_DIR)/tests\n")
        fh.write("COV_DIR    = $(SIM_DIR)/cov\n")
        fh.write("\n")
        fh.write("OUT_DIR    = $(SIM_DIR)/outs\n")
        fh.write("LOG_DIR    = $(SIM_DIR)/logs\n")
        fh.write("\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("# TestBench\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("TBTOPNAME  = %s\n" % (self.testbench_top_name))
        fh.write("TBTOP      = $(ENV_DIR)/$(TBTOPNAME).sv\n")
        fh.write("\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("# args used in tests\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("TEST         ?= %s\n" % (self.testsample_name))
        fh.write("SEED         ?= 1\n")
        fh.write("TEST_NAME     = $(TEST)_$(SEED)\n")
        fh.write("LOG_DIR_TEST  = $(LOG_DIR)/$(TEST_NAME)\n")
        fh.write("NUM_TRANS    ?= 100\n")
        fh.write("\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("# source\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("#--- design ---\n")
        fh.write("SRC_LIST += $(RTL_DIR)/filelist\n")
        fh.write("\n")
        fh.write("#--- verif ---\n")
        fh.write("TBINC += +incdir+$(RTL_DIR)\n")
        fh.write("%s" % (testbench_model_path_inc))
        fh.write("TBINC += +incdir+$(ENV_DIR)\n")
        fh.write("TBINC += +incdir+$(SIM_DIR)\n")
        fh.write("TBINC += +incdir+$(TEST_DIR)\n")
        fh.write("TBINC += +incdir+$(VCS_HOME)/etc/uvm-1.1/src\n")
        fh.write("\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("# COVERAGE\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("COV_ONOFF  += ON\n")
        fh.write("\n")
        fh.write("ifeq (${COV_ONOFF}, ON)\n")
        fh.write("  COV_COMP += -cm line+cond+fsm+tgl+branch+assert\n")
        fh.write("  COV_COMP += -cm_dir $(COV_DIR)/simv.vdb\n")
        fh.write("  COV_COMP += -cm_name $(TEST_NAME)\n")
        fh.write("  \n")
        fh.write("  COV_RUN  += -cm line+cond+fsm+tgl+branch+assert\n")
        fh.write("  COV_RUN  += -cm_dir $(COV_DIR)/simv.vdb\n")
        fh.write("  COV_RUN  += -cm_name $(TEST_NAME)\n")
        fh.write("  COV_RUN  += +tb_cov_db_dir=$(COV_DIR)\n")
        fh.write("  COV_RUN  += R+tb_cov_db_name=$(TEST_NAME)\n")
        fh.write("  \n")
        fh.write("  URG_OPT  += -format both\n")
        fh.write("  URG_OPT  += -report $(COV_DIR)/urgReport\n")
        fh.write("  URG_OPT  += -split metric -legacy\n")
        fh.write("  URG_OPT  += -metric line\n")
        fh.write("  URG_OPT  += -metric cond\n")
        fh.write("  URG_OPT  += -metric fsm\n")
        fh.write("  URG_OPT  += -metric tgl\n")
        fh.write("  URG_OPT  += -metric branch\n")
        fh.write("  URG_OPT  += -metric group\n")
        fh.write("  URG_OPT  += -metric assert\n")
        fh.write("  URG_OPT  += -show ratios\n")
        fh.write("endif\n")
        fh.write("\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("# Options\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("OPT64 = -full64\n")
        fh.write("COMMON += -sverilog \n")
        fh.write("COMMON += +v2k\n")
        fh.write("COMMON += +vcs+lic+wait\n")
        fh.write("COMMON += +error+100\n")
        fh.write("COMMON += -timescale=1ns/1ps\n")
        fh.write("\n")
        fh.write("TBCMPOPT += -ntb_opts uvm\n")
        fh.write("TBCMPOPT += +define+UVM_PACKER_MAX_BYTES=1500000\n")
        fh.write("TBCMPOPT += +define+UVM_DISABLE_AUTO_ITEM_RECORDING\n")
        fh.write("TBCMPOPT += +define+UVM_OBJECT_MUST_HAVE_CONSTRUCTOR\n")
        fh.write("TBCMPOPT += +notimingchecks\n")
        fh.write("TBCMPOPT += $(COV_COMP)\n")
        fh.write("\n")
        fh.write("#ELABO += +acc +vpi -PP\n")
        fh.write("#ELABO += $(UVM_HOME)/src/uvm.sv\n")
        fh.write("#ELABO += $(UVM_HOME)/src/dpi/uvm_dpi.cc -CFLAGS -DVCS\n")
        fh.write("ELABO += -LDFLAGS -rdynamic libuvm_dpi.so\n")
        fh.write("ELABO += -Mdir=$(OUT_DIR)/csrc\n")
        fh.write("ELABO += -o    $(OUT_DIR)/simv\n")
        fh.write("ELABO += -l    $(LOG_DIR)/vcs_cmp.log\n")
        fh.write("\n")
        fh.write("SIMOPT += +UVM_TESTNAME=$(TEST)\n")
        fh.write("SIMOPT += +vcs+lic+wait\n")
        fh.write("SIMOPT += -lca\n")
        fh.write("SIMOPT += +vpdfile+$(LOG_DIR_TEST)/$(TEST_NAME).vpd\n")
        fh.write("SIMOPT += -l $(LOG_DIR_TEST)/log_$(TEST_NAME)_run.log\n")
        fh.write("SIMOPT += $(USIMARG)\n")
        fh.write("SIMOPT += +UVM_VERBOSITY=$(UVM_VERBOSITY)\n")
        fh.write("SIMOPT += +ntb_random_seed=$(SEED)\n")
        fh.write("SIMOPT += +NUM_TRANS=$(NUM_TRANS)\n")
        fh.write("SIMOPT += $(COV_RUN)\n")
        fh.write("\n")
        fh.write("#--------------------------------------\n")
        fh.write("# WAVEFORM\n")
        fh.write("#--------------------------------------\n")
        fh.write("ifeq ($(VPD), ON)\n")
        fh.write("  COMMON += +define+VPD_ON\n")
        fh.write("  ELABO  += -debug_pp\n")
        fh.write("  ELABO  += +vpdports\n")
        fh.write("endif\n")
        fh.write("\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("# COMMAND\n")
        fh.write("#-------------------------------------------------------------------------------\n")
        fh.write("\n")
        fh.write("SO_NAME = uvm_dpi\n")
        fh.write("SO_OBJ = lib$(SO_NAME).so\n")
        fh.write("\n")
        fh.write(".PHONY: reg\n")
        fh.write("\n")
        fh.write("all: ready elab run\n")
        fh.write("comp: ready elab\n")
        fh.write("\n")
        fh.write("\n")
        fh.write("ready:\n")
        fh.write("	@if [ ! -d $(OUT_DIR) ]; then mkdir $(OUT_DIR); fi\n")
        fh.write("	@if [ ! -d $(LOG_DIR) ]; then mkdir $(LOG_DIR); fi\n")
        fh.write("	@if [ ! -d $(COV_DIR) ]; then mkdir $(COV_DIR); fi\n")
        fh.write("	@if [ ! -f $(SO_OBJ) ]; then\\\n")
        fh.write("		gcc -m64 -fPIC -o $(SO_NAME).o -c -I$(VCS_HOME)/include -I$(VCS_HOME)/etc/uvm-1.1/src/dpi $(VCS_HOME)/etc/uvm-1.1/src/dpi/$(SO_NAME).cc;\\\n")
        fh.write("		gcc -m64 -shared -o $(SO_OBJ) $(SO_NAME).o;rm -f $(SO_NAME).o; fi\n")
        fh.write("\n")
        fh.write("elab: ready\n")
        fh.write("	vcs $(OPT64) $(COMMON) $(TBCMPOPT) $(ELABO) $(TBINC) -F $(SRC_LIST) $(TBTOP) -top $(TBTOPNAME)\n")
        fh.write("\n")
        fh.write("run:\n")
        fh.write("	@if [ ! -d $(LOG_DIR_TEST) ]; then mkdir $(LOG_DIR_TEST); fi\n")
        fh.write("	$(OUT_DIR)/simv $(SIMOPT) \n")
        fh.write("\n")
        fh.write("urg:\n")
        fh.write("	@urg -full64 -dir $(COV_DIR)/simv.vdb $(URG_OPT) \n")
        fh.write("\n")
        fh.write("clean:\n")
        fh.write("	@echo \"Please wait little...(Remove directory.)\" ;\n")
        fh.write("	@-rm -rf $(OUT_DIR) AN.DB\n")
        fh.write("	@-rm -rf ./DVEfiles .vcs* ./simv* ./*.key\n")
        fh.write("	@-rm -rf ./verdiLog ./novas.rc ./novas_dump.log\n")
        fh.write("	@-rm -rf .vlogansetup.args .vlogansetup.env\n")
        fh.write("\n")
        fh.write("distclean: cleanall\n")
        fh.write("\n")
        fh.write("cleanall:\n")
        fh.write("	@echo \"Please wait little...(Remove directory.)\" ;\n")
        fh.write("	@-rm -rf $(OUT_DIR)\n")
        fh.write("	@-rm -rf $(LOG_DIR)\n")
        fh.write("	@-rm -rf $(COV_DIR) ./cm.log\n")
        fh.write("	@-rm -rf ./DVEfiles .vcs* ./simv* ./*.key\n")
        fh.write("	@-rm -rf ./verdiLog ./novas.rc ./novas_dump.log\n")
        fh.write("	@-rm -rf .vlogansetup.args\n")
        fh.write("	@rm -rf ./AN.DB\n")
        fh.write("	@rm -rf ./libuvm_dpi.so\n")
        fh.write("\n")
        fh.close()
