from ..common import common 

class testbase:

    def __init__(self, header, project_name):
        self.header                    = header
        self.testbase_name             = project_name + "_testbase"
        self.environment_name          = project_name + "_env"
        self.environment_config_name   = project_name + "_env_cfg"

    def gen(self):
        fh = open(self.testbase_name + ".sv", "w")
        fh.write(self.header.replace("file_name", self.testbase_name + ".sv"))
        fh.write("`ifndef _%s_\n" % (self.testbase_name.upper()))
        fh.write("`define _%s_\n" % (self.testbase_name.upper()))
        fh.write("\n")
        fh.write("class %s extends uvm_test;\n" % (self.testbase_name))
        fh.write("  `uvm_component_utils(%s)\n" % (self.testbase_name))
        fh.write("\n")
        fh.write("  %-50s env;\n" % (self.environment_name))
        fh.write("  %-50s env_cfg;\n" % (self.environment_config_name))
        fh.write("\n")
        fh.write("%s" % (common.banner("function: new", 2)))
        fh.write("  function new(string name = \"%s\", uvm_component parent);\n" % (self.testbase_name))
        fh.write("    super.new(name, parent);\n")
        fh.write("  endfunction: new\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: build_phase", 2)))
        fh.write("  function void build_phase(uvm_phase phase);\n")
        fh.write("    super.build_phase(phase);\n")
        fh.write("\n")
        fh.write("    env = %s::type_id::create(\"env\", this);\n" % (self.environment_name))
        fh.write("    env_cfg = %s::type_id::create(\"env_cfg\", this);\n" % (self.environment_config_name))
        fh.write("    env_cfg.randomize();\n")
        fh.write("\n")
        fh.write("    //Register env_cfg into database\n")
        fh.write("    uvm_config_db #(%s)::set(this, \"*\",\"env_cfg\", env_cfg);\n" % (self.environment_config_name))
        fh.write("\n")
        fh.write("  endfunction: build_phase\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: start_of_simulation_phase", 2)))
        fh.write("  function void start_of_simulation_phase(uvm_phase phase);\n")
        fh.write("    super.start_of_simulation_phase(phase);\n")
        fh.write("    uvm_top.set_timeout(.timeout(env_cfg.test_time_out), .overridable(1));\n")
        fh.write("    `uvm_info(\"start_of_simulation_phase\", $sformatf(\"Printing topology\"), UVM_MEDIUM);\n")
        fh.write("     uvm_top.print_topology();\n")
        fh.write("\n")
        fh.write("  endfunction: start_of_simulation_phase\n")
        fh.write("\n")
        fh.write("%s" % (common.banner("function: report_phase", 2)))
        fh.write("  function void report_phase(uvm_phase phase);\n")
        fh.write("    uvm_report_server oReportServer;\n")
        fh.write("    int               iErrCnt;\n")
        fh.write("    string  msg;\n")
        fh.write("  \n")
        fh.write("    oReportServer = _global_reporter.get_report_server();\n")
        fh.write("    iErrCnt = oReportServer.get_severity_count(UVM_ERROR) + env.env_if._error_cnt;\n")
        fh.write("  \n")
        fh.write("    if (iErrCnt == 0) begin\n")
        fh.write("      msg =      \"         ************************************************************************************\\n\";\n")
        fh.write("      msg = {msg,\"         *  test_result :                         PASS                                      *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                                                                                  *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                ooooooooo.         .o.        .oooooo..o  .oooooo..o              *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                 888    Y88       .888.      d8P      Y8 d8P      Y8              *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                 888    d88      .88888.     Y88bo.      Y88bo.                   *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                 888ooo88P      .8   888.       Y8888o.     Y8888o.               *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                 888           .88ooo8888.          Y88b        Y88b              *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                 888          .8       888.  oo     .d8P oo     .d8P              *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                o888o        o88o     o8888o 88888888P8  88888888P8               *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                                                                                  *\\n\"}; \n")
        fh.write("      msg = {msg,\"         ************************************************************************************\\n\"};\n")
        fh.write("    end\n")
        fh.write("  \n")
        fh.write("    else begin\n")
        fh.write("      msg =      \"         ************************************************************************************\\n\";\n")
        fh.write("      msg = {msg,\"         *  test_result :                         FAIL                                      *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                                                                                  *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                oooooooooooo       .o.       ooooo ooooo                          *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                 888       8      .888.       888   888                           *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                 888             .88888.      888   888                           *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                 888oooo8       .8   888.     888   888                           *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                 888           .88ooo8888.    888   888                           *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                 888          .8       888.   888   888       o                   *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                o888o        o88o     o8888o o888o o888ooooood8                   *\\n\"}; \n")
        fh.write("      msg = {msg,\"         *                                                                                  *\\n\"}; \n")
        fh.write("      msg = {msg,\"         ************************************************************************************\\n\"};\n")
        fh.write("    end\n")
        fh.write("  \n")
        fh.write("    `uvm_info(\"SUMMARY\", $psprintf(\"\\n\\n%s\",msg), UVM_NONE)\n")
        fh.write("  endfunction : report_phase\n")
        fh.write("\n")
        fh.write("endclass: %s\n" % (self.testbase_name))
        fh.write("\n")
        fh.write("`endif //_%s_\n" % (self.testbase_name.upper()))
        fh.close()
